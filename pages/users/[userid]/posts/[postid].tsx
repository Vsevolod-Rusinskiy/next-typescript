// –ø–æ—Å—Ç —é–∑–µ—Ä–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É
import { GetServerSideProps } from "next";
import Head from "next/head";
import Link from "next/link";
import { useCallback, useState } from "react";
import { memo } from "react";
import { getComments, getPost, addComment } from "../../../../src/client";
import { PostComments } from "../../../../src/componens/post-comments";
import { ContainerCenter } from "../../../../src/styles/pagesGlobalStyles";
import ButtonItem from "../../../../src/styles/ui/button/buttonItem";
import { ButtonContainer } from "../../../../src/styles/ui/button/styleButtonItem";
import { Input } from "../../../../src/styles/ui/input-item/styleInputItem";
import ModalWindow from "../../../../src/styles/ui/modal-window/modalWindow";

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { postid } = context.params; // –∑–∞–±–µ—Ä–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —É—Ä–ª–∞???
  const post = await getPost(String(postid));
  const comments = await getComments(String(postid));

  if (!post) {
    return {
      notFound: true,
    };
  }
  return {
    props: { post: post, comments: comments, postid: postid },
  };
};

const PostDetails = ({ post, comments, postid }) => {
  // ü§¨ when rerender ?
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [text, setText] = useState("");

  const [localComments, setLocalComments] = useState([]);


  // –µ—Å–ª–∏ –±—ã —è —Ö–æ—Ç–µ–ª –ø–µ—Ä–µ–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–ø—É—Ç —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏–ª–∏ –Ω–µ—Ç ?

  // —Å–æ–∑–¥–∞—Ç—å —Å—Ç–µ–π—Ç —Å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º –∫–æ—Ç –ø–æ–¥—Ä—É–∂–∞—é—Ç—Å—è  –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç
  // –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ PostComments —Ä–µ–∑—É–ª—å—Ç–∞—Ç props.comments + –º–∞—Å—Å–∏–≤–∞ –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  // –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –º–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–µ–Ω—Ç –∫–æ—Ç –ø—Ä–∏—à–µ–ª —Å —Å–µ—Ä–≤–µ—Ä–∞

  // setName('') // how to clear ‚ùì
  // –∫–æ—Å—è–∫ —Å unique ID ‚ùì

  // const üëâ handleAddComment = useCallback((e) => {
  const addNewPost = useCallback(
    (e: any) => {
      e.preventDefault();
      addComment(postid, name, email, text).then((data) => {
        setLocalComments([...localComments, data]);
      });
      setName('');
      setEmail('');
      setText('');
    },
    [addComment, postid, name, email, text]
  );

  const showModal = useCallback(
    (e: any) => {
      setIsModalVisible(false);
    },

    [setIsModalVisible]
  );

  const handleNameChange = useCallback(
    (value: any) => {
      setName(value);
    },
    [setName]
  );
  const handleEmailChange = useCallback(
    (value: any) => {
      setEmail(value);
    },
    [setEmail]
  );

  const handleTextChange = useCallback(
    (value: any) => {
      setText(value);
    },
    [setText]
  );

  return (
    <div>
      <Head>
        <title>Post</title>
      </Head>
      <h1>{post.title}</h1>
      <p>{post.body}</p>
      <p style={{color: "red"}}>–°–¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫</p>
      <PostComments data={[...comments, ...localComments]}  /> 
      <ContainerCenter>
        <ButtonContainer>
          <button onClick={() => setIsModalVisible(true)}>Add comment</button>
        </ButtonContainer>
      </ContainerCenter>
      <ModalWindow visible={isModalVisible} setVisible={setIsModalVisible}>
        <form onSubmit={addNewPost}>
          <Input
            value={name}
            name="name"
            onChange={(e) => handleNameChange(e.target.value)}
            type="text"
            placeholder="Name"
          />
          <Input
            value={email}
            name="email"
            onChange={(e) => handleEmailChange(e.target.value)}
            type="text"
            placeholder="Email"
          />
          <Input
            value={text}
            name="text"
            onChange={(e) => handleTextChange(e.target.value)}
            type="text"
            placeholder="Text"
          />
          <ButtonItem onClick={showModal}>Send</ButtonItem>
        </form>
      </ModalWindow>
    </div>
  );
};
export default memo(PostDetails);
